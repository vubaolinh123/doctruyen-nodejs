const User = require('../../models/user');
const Story = require('../../models/story');
const Chapter = require('../../models/chapter');
const UserPurchases = require('../../models/userPurchases');
const PurchasedStory = require('../../models/purchasedStory');
const Transaction = require('../../models/transaction');

/**
 * Service x·ª≠ l√Ω logic nghi·ªáp v·ª• cho mua h√†ng
 */
class PurchaseService {
  /**
   * Mua truy·ªán
   * @param {string} userId - ID ng∆∞·ªùi d√πng
   * @param {string} storyId - ID truy·ªán
   * @returns {Object} - K·∫øt qu·∫£ mua h√†ng
   */
  async purchaseStory(userId, storyId) {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await User.findById(userId);
      if (!user) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
      }

      // Ki·ªÉm tra story t·ªìn t·∫°i v√† c√≥ ph·∫£i tr·∫£ ph√≠ kh√¥ng
      const story = await Story.findById(storyId);
      if (!story) {
        throw new Error('Truy·ªán kh√¥ng t·ªìn t·∫°i');
      }

      // Business Rule 1: Ch·ªâ cho ph√©p mua story n·∫øu story.isPaid = true
      if (!story.isPaid || !story.price || story.price <= 0) {
        throw new Error('Truy·ªán n√†y kh√¥ng c·∫ßn mua ho·∫∑c kh√¥ng ph·∫£i truy·ªán tr·∫£ ph√≠');
      }

      // Ki·ªÉm tra ƒë√£ mua ch∆∞a
      const alreadyPurchased = await UserPurchases.checkStoryPurchased(userId, storyId);
      if (alreadyPurchased) {
        throw new Error('B·∫°n ƒë√£ mua truy·ªán n√†y r·ªìi');
      }

      // Ki·ªÉm tra s·ªë xu ƒë·ªß kh√¥ng
      if (user.coin < story.price) {
        throw new Error(`S·ªë xu kh√¥ng ƒë·ªß. C·∫ßn ${story.price} xu, b·∫°n c√≥ ${user.coin} xu`);
      }

      // Tr·ª´ xu c·ªßa user
      await user.deductCoins(story.price, 'Mua truy·ªán: ' + story.name);

      // T·∫°o transaction
      const transaction = await Transaction.createTransaction({
        user_id: userId,
        description: `Mua Truy·ªán: ${story.name}`,
        type: 'purchase',
        coin_change: -story.price,
        balance_after: user.coin,
        reference_type: 'story',
        reference_id: storyId,
        metadata: {
          story_name: story.name,
          story_slug: story.slug,
          purchase_type: 'story'
        }
      });

      // L∆∞u v√†o UserPurchases (new system)
      const userPurchases = await UserPurchases.purchaseStory(
        userId, 
        storyId, 
        story.price, 
        transaction._id
      );

      // L∆∞u v√†o PurchasedStory (backward compatibility)
      await PurchasedStory.purchaseStory(
        userId, 
        storyId, 
        story.price, 
        transaction._id
      );

      return {
        success: true,
        message: `ƒê√£ mua truy·ªán "${story.name}" th√†nh c√¥ng`,
        data: {
          story: {
            id: story._id,
            name: story.name,
            slug: story.slug,
            price: story.price
          },
          transaction: {
            id: transaction._id,
            amount: story.price,
            balance_after: user.coin
          },
          purchase_date: new Date()
        }
      };

    } catch (error) {
      console.error('[PurchaseService.purchaseStory] Error:', error);
      throw error;
    }
  }

  /**
   * Mua chapter
   * @param {string} userId - ID ng∆∞·ªùi d√πng
   * @param {string} chapterId - ID chapter
   * @returns {Object} - K·∫øt qu·∫£ mua h√†ng
   */
  async purchaseChapter(userId, chapterId) {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await User.findById(userId);
      if (!user) {
        throw new Error('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
      }

      // Ki·ªÉm tra chapter t·ªìn t·∫°i v√† c√≥ ph·∫£i tr·∫£ ph√≠ kh√¥ng
      const chapter = await Chapter.findById(chapterId).populate('story_id', 'name slug isPaid');
      if (!chapter) {
        throw new Error('Chapter kh√¥ng t·ªìn t·∫°i');
      }

      // Business Rule 2: Ch·ªâ cho ph√©p mua chapter n·∫øu story.isPaid = false
      if (chapter.story_id.isPaid) {
        throw new Error('Kh√¥ng th·ªÉ mua chapter ri√™ng l·∫ª cho truy·ªán tr·∫£ ph√≠. Vui l√≤ng mua c·∫£ truy·ªán.');
      }

      if (!chapter.isPaid) {
        throw new Error('Chapter n√†y kh√¥ng c·∫ßn mua');
      }

      // Ki·ªÉm tra ƒë√£ mua ch∆∞a
      const alreadyPurchased = await UserPurchases.checkChapterPurchased(userId, chapterId);
      if (alreadyPurchased) {
        throw new Error('B·∫°n ƒë√£ mua chapter n√†y r·ªìi');
      }

      // Ki·ªÉm tra s·ªë xu ƒë·ªß kh√¥ng
      if (user.coin < chapter.price) {
        throw new Error(`S·ªë xu kh√¥ng ƒë·ªß. C·∫ßn ${chapter.price} xu, b·∫°n c√≥ ${user.coin} xu`);
      }

      // Tr·ª´ xu c·ªßa user
      await user.deductCoins(chapter.price, `Mua chapter: ${chapter.name}`);

      // T·∫°o transaction
      const transaction = await Transaction.createTransaction({
        user_id: userId,
        description: `Mua Chapter: ${chapter.name} - ${chapter.story_id.name}`,
        type: 'purchase',
        coin_change: -chapter.price,
        balance_after: user.coin,
        reference_type: 'chapter',
        reference_id: chapterId,
        metadata: {
          chapter_name: chapter.name,
          chapter_number: chapter.chapter,
          story_name: chapter.story_id.name,
          story_slug: chapter.story_id.slug,
          purchase_type: 'chapter'
        }
      });

      // L∆∞u v√†o UserPurchases
      const userPurchases = await UserPurchases.purchaseChapter(
        userId, 
        chapterId, 
        chapter.story_id._id, 
        chapter.price, 
        transaction._id
      );

      return {
        success: true,
        message: `ƒê√£ mua chapter "${chapter.name}" th√†nh c√¥ng`,
        data: {
          chapter: {
            id: chapter._id,
            name: chapter.name,
            number: chapter.chapter,
            price: chapter.price
          },
          story: {
            id: chapter.story_id._id,
            name: chapter.story_id.name,
            slug: chapter.story_id.slug
          },
          transaction: {
            id: transaction._id,
            amount: chapter.price,
            balance_after: user.coin
          },
          purchase_date: new Date()
        }
      };

    } catch (error) {
      console.error('[PurchaseService.purchaseChapter] Error:', error);
      throw error;
    }
  }

  /**
   * Ki·ªÉm tra quy·ªÅn truy c·∫≠p n·ªôi dung v·ªõi business logic m·ªõi
   * @param {string|null} userId - ID ng∆∞·ªùi d√πng (c√≥ th·ªÉ null n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
   * @param {string} storyId - ID truy·ªán
   * @param {string} chapterId - ID chapter (optional)
   * @returns {Object} - Th√¥ng tin quy·ªÅn truy c·∫≠p
   */
  async checkAccess(userId, storyId, chapterId = null) {
    try {
      console.log(`[PurchaseService.checkAccess] üîç DEBUGGING PURCHASE VALIDATION`);
      console.log(`[PurchaseService.checkAccess] userId: ${userId}`);
      console.log(`[PurchaseService.checkAccess] storyId: ${storyId}`);
      console.log(`[PurchaseService.checkAccess] chapterId: ${chapterId}`);
      // Ki·ªÉm tra story c√≥ t·ªìn t·∫°i kh√¥ng
      const story = await Story.findById(storyId);
      if (!story) {
        throw new Error('Truy·ªán kh√¥ng t·ªìn t·∫°i');
      }

      // Business Rule 1: Paid Stories (Story-level purchase)
      if (story.isPaid) {
        // N·∫øu story tr·∫£ ph√≠, t·∫•t c·∫£ chapters ƒë·ªÅu free sau khi mua story
        if (!userId) {
          return {
            hasAccess: false,
            reason: 'story_not_purchased',
            message: `C·∫ßn ƒëƒÉng nh·∫≠p v√† mua truy·ªán n√†y (${story.price || 0} xu)`,
            prices: {
              story: story.price || 0
            }
          };
        }

        // Ki·ªÉm tra ƒë√£ mua story ch∆∞a
        const storyPurchased = await UserPurchases.checkStoryPurchased(userId, storyId);
        if (storyPurchased) {
          return {
            hasAccess: true,
            reason: 'story_purchased',
            message: 'ƒê√£ mua c·∫£ truy·ªán - t·∫•t c·∫£ chapters mi·ªÖn ph√≠'
          };
        }

        return {
          hasAccess: false,
          reason: 'story_not_purchased',
          message: `C·∫ßn mua truy·ªán n√†y (${story.price || 0} xu) ƒë·ªÉ ƒë·ªçc t·∫•t c·∫£ chapters`,
          prices: {
            story: story.price || 0
          }
        };
      }

      // Business Rule 2: Free Stories with Paid Chapters (Chapter-level purchase)
      if (!story.isPaid) {
        // N·∫øu kh√¥ng c√≥ chapterId, cho ph√©p truy c·∫≠p story (v√¨ story free)
        if (!chapterId) {
          return {
            hasAccess: true,
            reason: 'free_content',
            message: 'Truy·ªán mi·ªÖn ph√≠'
          };
        }

        // Ki·ªÉm tra chapter c·ª• th·ªÉ
        const chapter = await Chapter.findById(chapterId);
        if (!chapter) {
          throw new Error('Chapter kh√¥ng t·ªìn t·∫°i');
        }

        // N·∫øu chapter kh√¥ng tr·∫£ ph√≠, cho ph√©p truy c·∫≠p
        if (!chapter.isPaid) {
          return {
            hasAccess: true,
            reason: 'free_content',
            message: 'Chapter mi·ªÖn ph√≠'
          };
        }

        // Chapter tr·∫£ ph√≠ - c·∫ßn ki·ªÉm tra purchase
        if (!userId) {
          return {
            hasAccess: false,
            reason: 'chapter_not_purchased',
            message: `C·∫ßn ƒëƒÉng nh·∫≠p v√† mua chapter n√†y (${chapter.price || 0} xu)`,
            prices: {
              chapter: chapter.price || 0
            }
          };
        }

        // Ki·ªÉm tra ƒë√£ mua chapter ch∆∞a
        console.log(`[PurchaseService.checkAccess] üîç Checking chapter purchase for userId: ${userId}, chapterId: ${chapterId}`);
        const chapterPurchased = await UserPurchases.checkChapterPurchased(userId, chapterId);
        console.log(`[PurchaseService.checkAccess] üìä Chapter purchase result: ${chapterPurchased}`);

        if (chapterPurchased) {
          console.log(`[PurchaseService.checkAccess] ‚úÖ Chapter access granted - user has purchased chapter`);
          return {
            hasAccess: true,
            reason: 'chapter_purchased',
            message: 'ƒê√£ mua chapter n√†y'
          };
        }

        console.log(`[PurchaseService.checkAccess] ‚ùå Chapter access denied - user has not purchased chapter`);

        return {
          hasAccess: false,
          reason: 'chapter_not_purchased',
          message: `C·∫ßn mua chapter n√†y (${chapter.price || 0} xu)`,
          prices: {
            chapter: chapter.price || 0
          }
        };
      }

      // Fallback - kh√¥ng n√™n ƒë·∫øn ƒë√¢y v·ªõi business logic m·ªõi
      return {
        hasAccess: false,
        reason: 'unknown_error',
        message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra quy·ªÅn truy c·∫≠p'
      };

    } catch (error) {
      console.error('[PurchaseService.checkAccess] Error:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch purchases c·ªßa user
   * @param {string} userId - ID ng∆∞·ªùi d√πng
   * @returns {Object} - Danh s√°ch purchases
   */
  async getUserPurchases(userId) {
    try {
      const userPurchases = await UserPurchases.getUserPurchases(userId);
      
      if (!userPurchases) {
        return {
          success: true,
          data: {
            purchasedStories: [],
            purchasedChapters: [],
            stats: {
              total_stories_purchased: 0,
              total_chapters_purchased: 0,
              total_coins_spent: 0,
              first_purchase_date: null,
              last_purchase_date: null
            }
          }
        };
      }

      return {
        success: true,
        data: {
          purchasedStories: userPurchases.purchasedStories.filter(p => p.status === 'active'),
          purchasedChapters: userPurchases.purchasedChapters.filter(p => p.status === 'active'),
          stats: userPurchases.stats
        }
      };

    } catch (error) {
      console.error('[PurchaseService.getUserPurchases] Error:', error);
      throw error;
    }
  }
}

module.exports = new PurchaseService();
